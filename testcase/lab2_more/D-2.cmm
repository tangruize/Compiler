// D-2
//输入
 struct Node{
 int no;
 int array[5];
 float value;
 int nextno;
 }node[100];
 int initial_Node(struct Node temp1){
 int i = 0;
 while(i < 5){
 temp1.array[i] = i + i * (2 * i + 1);
 i = i + 1;
 }
 temp1.value = 0.0;
 temp1.no = temp1.nextno = -1;
 return 1;
 }
 int link_Node(struct Node former, struct Node later){
 int result = 0;
 if(former.nextno!=-1 && later.nextno == -1){
 int result = 0;
 later.nextno = former.nextno;
 former.nextno = later.no;
 return result;
 }
 else if(former.nextno == -1 && later.nextno != -1){
 int result = 1;
 former.nextno = later.no;
 return result;
 }
 return -1;
 }
 int main(){
 struct Node a, b;
 int i, N = 100;
 initial_Node(a);
 initial_Node(b);
 link_Node(a,b);
 while(i < N){
 initial_Node(node[i]);
 i = i + 1;
 }
 i = 0;
 while(i < N){
 link_Node(node[i],node[i+1]);
 i = i + 1;
 }
 return 0;
 }
//输出
 // 正 常 返 回 , 没 有 任 何 输 出 。
//说明:对于 2.2 分组的同学,应该没有任何输出,其他分组的同学应该会识别出大量的重复定义
//量(result 和 i)。
